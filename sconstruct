#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os

import mmenv
import mmmodule
from mmcommon import *

global mm_module_arch

mm_module_arch = ARGUMENTS.get('arch', '')


def get_module(name, ver, repo, path=''):
    return mmmodule.get_module(name, ver, repo, path)


def init_module(module, name_stack=[]):
    name_stack.append(str(module))

    module.init_source()
    module.init_config()
    for (name, ver, repo) in module.module_depend:
        dep_module = get_module(name, ver, repo)
        if str(dep_module) in name_stack:
            print("Depend error")
            return
        init_module(dep_module, name_stack)
    name_stack.pop()


def build_example(module):
    pass


def build_unittest(module):
    pass


def build_module(module, env):
    module.init_depend()
    source = module.source_list
    source_count = len(source)
    if source_count == 0:
        print("%s source is none." % module.module_name)
        return

    print source
    # print(">>>>>>>>>>>>", module.module_name, module.inc_dir)
    # print(">>>>>>>>>>>>", module.module_name, module.dep_inc_dir)
    # print("node = %s name = %s source = %s" % (module_node, name, source))
    list_inc = []
    list_append(list_inc, module.inc_dir)
    list_append(list_inc, module.dep_inc_dir)

    list_ccflags = []
    list_append(list_ccflags, module.ccflags)
    list_append(list_ccflags, module.dep_ccflags)

    list_cxxflags = []
    list_append(list_cxxflags, module.cxxflags)
    list_append(list_cxxflags, module.dep_cxxflags)

    list_linkflags = []
    list_append(list_linkflags, module.linkflags)
    list_append(list_linkflags, module.dep_linkflags)

    args_dict = {}
    args_dict["CPPPATH"] = list_inc
    args_dict["CCFLAGS"] = list_ccflags
    args_dict["CXXFLAGS"] = list_cxxflags
    args_dict["LINKFLAGS"] = list_linkflags
    print(args_dict)

    lib_name = os.path.join(mmenv.global_env.lib_dir, module.module_name)
    sharelib = env.SharedLibrary(target=lib_name, source=source, **args_dict)
    staticlib = env.StaticLibrary(target=lib_name, source=source, **args_dict)

    for (name, ver, repo) in module.module_depend:
        dep_module = mmmodule.get_module(name, ver, repo)
        [dep_sharelib, dep_staticlib] = build_module(dep_module, env)
        env.Depends(sharelib, dep_sharelib)
        env.Depends(staticlib, dep_staticlib)

    return [sharelib, staticlib]


env = Environment(tools=['default', TOOL_ADD_HEADER])
env.Repository(mmenv.global_env.source_dir)
# env.VariantDir(mmenv.global_env.build_dir, mmenv.global_env.source_dir, duplicate=0)
# env['CCCOMSTR'] = "Compiling $TARGET"
# env['CXXCOMSTR'] = "Compiling $TARGET"
# env['LINKCOMSTR'] = "Linking $TARGET"
# env['STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME']=1
# Export('env')

name = ARGUMENTS.get('name', '')
ver = ARGUMENTS.get('ver', '')
repo = ARGUMENTS.get('repo', '')
pwd = ARGUMENTS.get('pwd', '')
path = ''
if name is '':
    path = pwd
    env.Repository(os.path.normpath(os.path.join(path, os.path.pardir)))
current_module = get_module(name, ver, repo, path)
module_build_dir = os.path.join(mmenv.global_env.build_dir, module_to_dir(name, ver))
print(module_build_dir, current_module.module_path)
# env.VariantDir(module_build_dir, current_module.module_path, duplicate=0)
env.SConsignFile(os.path.join(mmenv.global_env.build_dir, ".sconsign.dblite"))
init_module(current_module)

lib = build_module(current_module, env)
env.Default(lib)

if False:
    # platform = ARGUMENTS.get('config', Platform())
    config_path = ""
    mm_builder = MMBuilder(env, config_path)

    locallibs = mm_builder.copy_locallibs()
    env.Default(locallibs)

    dependlibs = mm_builder.depend_lib_files
    env.Default(locallibs)

    build_module = mm_builder.build_module()
    env.Depends(build_module, locallibs)
    env.Alias('modules', build_module)
    env.Default(build_module)

    build_example = mm_builder.build_example()
    # print "locallibs %s " % locallibs
    # print "dependlibs %s " % dependlibs
    env.Depends(build_example, locallibs)
    env.Depends(build_example, dependlibs)
    env.Depends(build_example, build_module)
    env.Alias('example', build_example)

    install = mm_builder.install()
    env.Depends(install, build_module)
    env.Alias('install', install)

    packall = mm_builder.packall()
    env.Depends(packall, dependlibs)
    env.Depends(packall, build_module)
    env.Alias('packall', packall)

    env.Command("clean", "", [Delete(mm_builder.build_dir)])

