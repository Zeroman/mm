#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os

import mmmodule
from mmcommon import *
from mmenv import global_env
from mmdebug import mm_debug

global_env.set_arch(ARGUMENTS.get('arch', ''))


def get_module(name, ver, repo, path=''):
    return mmmodule.get_module(name, ver, repo, path)


def init_module(module, name_stack=[]):
    name_stack.append(str(module))

    module.init_source()
    module.init_config()
    for (name, ver, repo) in module.module_depend:
        dep_module = get_module(name, ver, repo)
        if str(dep_module) in name_stack:
            print("Depend error")
            return
        init_module(dep_module, name_stack)
    name_stack.pop()


def build_example(module):
    pass


def build_unittest(module):
    pass


def copy_locallibs(module, env):
    target = []
    for dir in module.lib_dir:
        mm_debug(dir)
        target.append(env.Install(global_env.lib_dir, dir))
    return target

def init_arch(env):
    env_cc = global_env.get_arch_env("CC")
    if env_cc is not None:
        env['CC'] = env_cc
    env_cxx = global_env.get_arch_env("CXX")
    if env_cxx is not None:
        env['CXX'] = env_cxx
    env_ccflags = global_env.get_arch_env("CCFLAGS")
    if env_ccflags is not None:
        env.Append(CCFLAGS=env_ccflags)
    env_cxxflags = global_env.get_arch_env("CXXFLAGS")
    if env_cxxflags is not None:
        env.Append(CXXFLAGS=env_cxxflags)
    env_linkflags = global_env.get_arch_env("LINKFLAGS")
    if env_linkflags is not None:
        env.Append(LINKFLAGS=env_linkflags)
    print(env['CC'])
    print(env['CXX'])

def build_module(module, env):
    module.init_depend()

    local_libs = copy_locallibs(module, env)

    source = get_source_list(module.source_info, module.module_path, global_env.src_suffixes)
    # print source
    source_count = len(source)
    if source_count == 0:
        print("%s source is none." % module.module_name)
        print local_libs
        return local_libs

    # print(">>>>>>>>>>>>", module.module_name, module.inc_dir)
    print(">>>>>>>>>>>>", module.module_name, module.dep_inc_dir)
    # print("node = %s name = %s source = %s" % (module_node, name, source))
    list_inc = []
    list_append(list_inc, module.inc_dir)
    list_append(list_inc, module.source_dir)
    list_append(list_inc, module.source_inc_dir)
    list_append(list_inc, module.dep_inc_dir)

    list_ccflags = []
    list_append(list_ccflags, global_env.ccflags)
    list_append(list_ccflags, module.ccflags)
    list_append(list_ccflags, module.dep_ccflags)

    list_cxxflags = []
    list_append(list_cxxflags, module.cxxflags)
    list_append(list_cxxflags, module.dep_cxxflags)

    list_linkflags = []
    list_append(list_linkflags, module.linkflags)
    list_append(list_linkflags, module.dep_linkflags)

    args_dict = {}
    args_dict["CPPPATH"] = list_inc
    args_dict["CCFLAGS"] = list_ccflags
    args_dict["CXXFLAGS"] = list_cxxflags
    args_dict["LINKFLAGS"] = list_linkflags

    # print source
    # print(module.cxxflags, module.dep_ccflags)
    print("%s : %s" % (module.module_name, args_dict))

    lib_name = os.path.join(global_env.lib_dir, module.module_name)
    sharelib = env.SharedLibrary(target=lib_name, source=source, **args_dict)
    staticlib = env.StaticLibrary(target=lib_name, source=source, **args_dict)

    for (name, ver, repo) in module.module_depend:
        dep_module = mmmodule.get_module(name, ver, repo)
        [dep_sharelib, dep_staticlib] = build_module(dep_module, env)
        env.Depends(sharelib, dep_sharelib)
        env.Depends(staticlib, dep_staticlib)

    if len(local_libs) > 0:
        env.Depends([sharelib, staticlib], local_libs)
    return [sharelib, staticlib]


def build_functest(module, env):
    source = get_source_list(["dir:func_test"], module.module_path, global_env.src_suffixes)
    source_count = len(source)
    if source_count == 0:
        print("%s source is none." % module.module_name)
        return []

    list_inc = []
    list_append(list_inc, module.inc_dir)
    list_append(list_inc, module.source_dir)
    list_append(list_inc, module.source_inc_dir)
    list_append(list_inc, module.dep_inc_dir)

    list_ccflags = []
    list_append(list_ccflags, global_env.ccflags)
    list_append(list_ccflags, module.ccflags)
    list_append(list_ccflags, module.dep_ccflags)
    inc_dir = module.inc_dir
    for dir in inc_dir:
        inc_file = module.module_name + '.h'
        inc_file = env.FindFile(inc_file, dir)
        if inc_file is not None:
            list_append(list_ccflags, ["-include", str(inc_file)])

    list_cxxflags = []
    list_append(list_cxxflags, module.cxxflags)
    list_append(list_cxxflags, module.dep_cxxflags)

    list_linkflags = []
    list_append(list_linkflags, module.linkflags)
    list_append(list_linkflags, module.dep_linkflags)

    list_libs = []
    for (name, ver, repo) in module.all_module_depend:
        list_append(list_libs, name)
    list_append(list_libs, module.module_name)

    args_dict = {}
    args_dict["LIBS"] = list_libs
    args_dict["CPPPATH"] = list_inc
    args_dict["LIBPATH"] = global_env.lib_dir
    args_dict["CCFLAGS"] = list_ccflags
    args_dict["CXXFLAGS"] = list_cxxflags
    args_dict["LINKFLAGS"] = list_linkflags

    # print source
    # print(module.cxxflags, module.dep_ccflags)
    print("%s : %s" % (module.module_name, args_dict))

    dst = []
    for src in source:
        dst_bin = env.Program(source=src, **args_dict)
        dst.append(dst_bin)
    return dst

def packall(module, env):
    zip_dir = os.path.join(global_env.build_dir, module.module_name, "zip")
    self.env.Accumulate(zip_dir, module.inc_dir)
    self.env.Accumulate(zip_dir, module.dep_inc_dir)
    # zip_libdir = os.path.join(zip_dir, "lib")
    # self.env.Accumulate(zip_libdir, module.local_libs)
    # self.env.Accumulate(zip_libdir, self.depend_lib_files)
    # self.env.Accumulate(zip_libdir, module.local_libs)
    zip_path = os.path.join(self.build_dir, self.module_name + "_all")
    zipall = self.env.Zipper(zip_path, zip_dir)
    return zipall

env = Environment(tools=['default', TOOL_ADD_HEADER])
env['STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME'] = 1
env.Repository(global_env.source_dir)
env.VariantDir(global_env.build_dir, global_env.source_dir, duplicate=0)
# env['CCCOMSTR'] = "Compiling $TARGET"
# env['CXXCOMSTR'] = "Compiling $TARGET"
# env['LINKCOMSTR'] = "Linking $TARGET"
# Export('env')

name = ARGUMENTS.get('name', '')
ver = ARGUMENTS.get('ver', '')
repo = ARGUMENTS.get('repo', '')
pwd = ARGUMENTS.get('pwd', '')
path = ''
if name is '':
    path = pwd
    env.Repository(os.path.normpath(os.path.join(path, os.path.pardir)))
current_module = get_module(name, ver, repo, path)
module_build_dir = os.path.join(global_env.build_dir, module_to_dir(name, ver))
print(module_build_dir, current_module.module_path)
env.SConsignFile(os.path.join(global_env.build_dir, ".sconsign.dblite"))
init_module(current_module)

init_arch(env)
lib = build_module(current_module, env)
env.Default(lib)
functest = build_functest(current_module, env)
env.Default(functest)

env.Alias('pack', packall)

if False:
    # platform = ARGUMENTS.get('config', Platform())
    config_path = ""
    mm_builder = MMBuilder(env, config_path)

    locallibs = mm_builder.copy_locallibs()
    env.Default(locallibs)

    dependlibs = mm_builder.depend_lib_files
    env.Default(locallibs)

    build_module = mm_builder.build_module()
    env.Depends(build_module, locallibs)
    env.Alias('modules', build_module)
    env.Default(build_module)

    build_example = mm_builder.build_example()
    # print "locallibs %s " % locallibs
    # print "dependlibs %s " % dependlibs
    env.Depends(build_example, locallibs)
    env.Depends(build_example, dependlibs)
    env.Depends(build_example, build_module)
    env.Alias('example', build_example)

    install = mm_builder.install()
    env.Depends(install, build_module)
    env.Alias('install', install)

    packall = mm_builder.packall()
    env.Depends(packall, dependlibs)
    env.Depends(packall, build_module)
    env.Alias('packall', packall)

    env.Command("clean", "", [Delete(mm_builder.build_dir)])

